# vscode tasks.json
{
	// 有关 tasks.json 格式的文档，请参见
		// https://go.microsoft.com/fwlink/?LinkId=733558
		"version": "2.0.0",
		"tasks": [
			{
				"label": "catkin_make:debug", //代表提示的描述性信息
				"type": "shell",  //可以选择shell或者process,如果是shell代码是在shell里面运行一个命令，如果是process代表作为一个进程来运行
				"command": "catkin_make",//这个是我们需要运行的命令
				"args": [],//如果需要在命令后面加一些后缀，可以写在这里，比如-DCATKIN_WHITELIST_PACKAGES=“pac1;pac2”
				"group": {"kind":"build","isDefault":true},
				"presentation": {
					"reveal": "always"//可选always或者silence，代表是否输出信息
				},
				"problemMatcher": "$msCompile"
			}
		]
	}


#launch
<launch>
    <node pkg="pkgname" type="可执行文件" name="节点名" output="screen" />
   output默认为log
   <launch>
    <node pkg="helloworld" type="demo_hello" name="hello" output="screen" />
    <node pkg="turtlesim" type="turtlesim_node" name="t1"/>
    <node pkg="turtlesim" type="turtle_teleop_key" name="key1" />
</launch>

roslaunch pkgname launchname(通常为launch)




# 通信
    #话题通信
 需求: 实现基本的话题通信，一方发布数据，一方接收数据，
         实现的关键点:
         1.发送方
         2.接收方
         3.数据(此处为普通文本)

         PS: 二者需要设置相同的话题


    消息发布方:
        循环发布信息:HelloWorld 后缀数字编号

    实现流程:
        1.包含头文件 
            ROS中文件类型 std_msgs/String.h
        2.初始化 ROS 节点:命名(唯一)
        3.实例化 ROS 句柄
       
       
        4.实例化 发布者 对象                       4.订阅者对象
        5.组织被发布的数据，并编写逻辑发布数据       5.回调函数
        6.spin（）函数-----处理回调函数
       
       
        rpt-graph---可视化

        解耦合--话题一致


.xml
#自定义msg

  <build_depend>message_generation</build_depend>
  <exec_depend>message_runtime</exec_depend>
  <!-- 
  exce_depend 以前对应的是 run_depend 现在非法
  -->

cmakelists
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  message_generation
)
# 需要加入 message_generation,必须有 std_msgs
## 配置 msg 源文件
add_message_files(
  FILES
  Person.msg
)
# 生成消息时依赖于 std_msgs
generate_messages(
  DEPENDENCIES
  std_msgs
)
#执行时依赖
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES demo02_talker_listener
  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime
#  DEPENDS system_lib
)
# rostopic echo chatter

# msg调用
   
   vscode c_cpp_properties.json
   {
    "configurations": [
        {
            "browse": {
                "databaseFilename": "",
                "limitSymbolsToIncludedHeaders": true
            },
            "includePath": [
                "/opt/ros/noetic/include/**",
                "/usr/include/**",
                "/xxx/yyy工作空间/devel/include/**" //配置 head 文件的路径 
            ],
            "name": "ROS",
            "intelliSenseMode": "gcc-x64",
            "compilerPath": "/usr/bin/gcc",
            "cStandard": "c11",
            "cppStandard": "c++17"
        }
    ],
    "version": 4
}
     cmakelists
    
    add_dependencies(person_talker ${PROJECT_NAME}_generate_messages_cpp)
    add_dependencies(person_listener ${PROJECT_NAME}_generate_messages_cpp)

    include "include下pkgname/**.h"

    pub  ros::Publisher pub = nh.advertise<hellov::person>("chattermsg",10);
         hellov::person p;
        p.name="sf";
        p.age=1;
        p.height=1.80;
    sub    void domsg(const hellov::person::ConstPtr &msg)
            {
                ROS_INFO("this is %s %d %f",msg->name.c_str(),msg->age,msg->height);
            }



#服务通信
# 自定义srv
    <build_depend>message_generation</build_depend>
  <exec_depend>message_runtime</exec_depend>
  <!-- 
  exce_depend 以前对应的是 run_depend 现在非法
  -->
Copy
CMakeLists.txt编辑 srv 相关配置

find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  message_generation
)
# 需要加入 message_generation,必须有 std_msgs
Copy
add_service_files(
  FILES
  AddInts.srv
)
Copy
generate_messages(
  DEPENDENCIES
  std_msgs
)
   
   CMakeLists
           
        add_dependencies(AddInts_Server ${PROJECT_NAME}_gencpp)
        add_dependencies(AddInts_Client ${PROJECT_NAME}_gencpp)

#调用src
   见demo2
    add_dependencies(AddInts_Server ${PROJECT_NAME}_gencpp)
    add_dependencies(AddInts_Client ${PROJECT_NAME}_gencpp)

#参数服务器
      nh.setParam("nh_double",3.14); //浮点型
    nh.setParam("nh_bool",true); //bool
        nh.getParam("name",name);
    nh.deleteParam("name")；

#常用命令
    rosnode
    rostopic
    rosmsg
    rosservice
    rossrv
    rosparam
              ----toppic_tools
        info list type